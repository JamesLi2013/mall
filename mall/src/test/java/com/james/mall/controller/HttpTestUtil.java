package com.james.mall.controller;import com.james.mall.util.StringUtil;import java.io.DataOutputStream;import java.io.File;import java.io.FileInputStream;import java.io.InputStream;import java.net.HttpURLConnection;import java.net.URL;import java.net.URLEncoder;import java.util.Map;/** * Created by lqx on 2017/12/23. */public class HttpTestUtil {    public static String token = "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIyMDA0IiwiYXVkIjoibW9iaWxlIiwiZXhwIjoxNTMzNjA2NDMxLCJpYXQiOjE1Mjg0MjI0MzF9.eMSb9DGsZjEI2x_ZCB9P1fdxXbOYGtSdcS7niAGy2Gc9oa34fI-K0cDjQfgNsMsAuvBnfWqsQp6Se3VkoxDMTw";    public static String tranPrefixUrl(String before) {        if (before.startsWith("http")) return before;//        return "http://119.29.227.192" + before;//        return "http://119.29.227.192:8080" + before;        return "http://localhost:8080" + before;    }    public static void get(String urlStr) {        urlStr = tranPrefixUrl(urlStr);//        String urlStr = "http://localhost:8080/friend/all";        HttpURLConnection conn = null;        URL url;        InputStream stream = null;        try {            url = new URL(urlStr);            conn = (HttpURLConnection) url.openConnection();            conn.setConnectTimeout(10000);            conn.setReadTimeout(10000);            conn.setRequestMethod("GET");            conn.setRequestProperty("Authorization", "Bearer " + token);            int responseCode = conn.getResponseCode();            if (responseCode == HttpURLConnection.HTTP_OK) {                stream = conn.getInputStream();                String result = StringUtil.tranInputStreamToString(stream);                System.out.println(urlStr + " 结果如下:");                System.out.println(result);            } else {                System.out.println("请求失败:" + responseCode + "--" + urlStr);            }        } catch (Exception e) {            e.printStackTrace();        } finally {            if (conn != null) conn.disconnect();        }    }    public static void post(String urlStr, Map<String, String> params) {        urlStr = tranPrefixUrl(urlStr);        HttpURLConnection conn = null;        URL url;        InputStream stream = null;        try {            StringBuilder sb = new StringBuilder();            for (Map.Entry<String, String> entry : params.entrySet()) {                sb.append(entry.getKey()).append("=").append(URLEncoder.encode(entry.getValue(), "UTF-8"));                sb.append("&");            }            String data = "";            if (sb.toString().length() > 2) data = sb.deleteCharAt(sb.length() - 1).toString();            url = new URL(urlStr);            conn = (HttpURLConnection) url.openConnection();            conn.setDoOutput(true);            conn.setDoInput(true);            conn.setRequestMethod("POST");            conn.setUseCaches(false);            conn.setInstanceFollowRedirects(true);            conn.setConnectTimeout(10 * 1000);            conn.setReadTimeout(10 * 1000);            conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");            conn.setRequestProperty("Connection", "Keep-Alive");            conn.setRequestProperty("Charset", "UTF-8");            conn.setRequestProperty("Authorization", "Bearer " + token);            DataOutputStream dos = new DataOutputStream(conn.getOutputStream());            dos.writeBytes(data);            dos.flush();            dos.close();            int responseCode = conn.getResponseCode();            if (responseCode == HttpURLConnection.HTTP_OK) {                stream = conn.getInputStream();                String result = StringUtil.tranInputStreamToString(stream);                System.out.println(urlStr + " 结果如下:");                System.out.println(result);            } else {                System.out.println("请求失败:" + responseCode + "--" + urlStr);            }        } catch (Exception e) {            e.printStackTrace();        } finally {            if (conn != null) conn.disconnect();        }    }    public static void postMult(String urlStr, Map<String, String> params, String filePath) {        urlStr = tranPrefixUrl(urlStr);        HttpURLConnection conn = null;        URL url;        InputStream stream = null;        String BOUNDARY = "WebKitFormBoundaryrGKCBY7qhFd3TrwA";        try {            url = new URL(urlStr);            conn = (HttpURLConnection) url.openConnection();            conn.setDoOutput(true);            conn.setDoInput(true);            conn.setRequestMethod("POST");            conn.setUseCaches(false);            conn.setInstanceFollowRedirects(true);            conn.setConnectTimeout(10 * 1000);            conn.setReadTimeout(10 * 1000);            conn.setRequestProperty("Connection", "Keep-Alive");            conn.setRequestProperty("Charset", "UTF-8");            conn.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows; U; Windows NT 6.1; zh-CN; rv:1.9.2.6)");            conn.setRequestProperty("Content-Type", "multipart/form-data; boundary=" + BOUNDARY);            conn.setRequestProperty("Authorization", "Bearer " + token);            String contentType = "application/octet-stream";            String inputName = "file";            File file = new File(filePath);            //text部分的头文件            StringBuilder sbForText = new StringBuilder();            for (Map.Entry<String, String> entry : params.entrySet()) {                sbForText.append("\r\n").append("--").append(BOUNDARY).append("\r\n");                sbForText.append("Content-Disposition: form-data; name=\"" + entry.getKey() + "\"\r\n");                sbForText.append("Content-Type:" + "text/plain" + "\r\n\r\n");                sbForText.append(URLEncoder.encode(entry.getValue(), "UTF-8"));            }            //File部分的头文件            StringBuilder sbForFile = new StringBuilder();            sbForFile.append("\r\n").append("--").append(BOUNDARY).append("\r\n");            sbForFile.append("Content-Disposition: form-data; name=\""                    + inputName + "\"; filename=\"" + file.getName() + "\"\r\n");            sbForFile.append("Content-Type:" + contentType + "\r\n\r\n");            DataOutputStream dos = new DataOutputStream(conn.getOutputStream());            dos.writeBytes(sbForText.toString());            dos.writeBytes(sbForFile.toString());            InputStream is = new FileInputStream(file);            byte[] fileBytes = new byte[10240];            int readIndex = 0;            while ((readIndex = is.read(fileBytes)) != -1) {                dos.write(fileBytes, 0, readIndex);            }            byte[] endData = ("\r\n--" + BOUNDARY + "--\r\n").getBytes();            dos.write(endData);            dos.flush();            dos.close();            int responseCode = conn.getResponseCode();            if (responseCode == HttpURLConnection.HTTP_OK) {                stream = conn.getInputStream();                String result = StringUtil.tranInputStreamToString(stream);                System.out.println(urlStr + " 结果如下:");                System.out.println(result);            } else {                System.out.println("请求失败:" + responseCode + "--" + urlStr);            }        } catch (Exception e) {            e.printStackTrace();        } finally {            if (conn != null) conn.disconnect();        }    }}